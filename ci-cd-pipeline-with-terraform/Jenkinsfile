pipeline {
    agent{
        label "jenkins-agent"
    }
    tools {
        "org.jenkinsci.plugins.terraform.TerraformInstallation" "terraform"
    }
    parameters {
        string(name: 'WORKSPACE', defaultValue: 'development', description: 'Setting up workspace for Terraform')
    }
    environment {
        TF_HOME = tool('terraform')
        TF_IN_AUTOMATION = "true"
        PATH = "$TF_HOME:$PATH"
    }
    stages {
        stage('TerraformInit') {
            steps {
                dir('jenkins-terraform-pipeline/ec2_pipeline/') {
                    sh "terraform init -input=false"
                }
            }
        }

        stage('TerraformFormat') {
            steps {
                dir('jenkins-terraform-pipeline/ec2_pipeline/') {
                    sh "terraform fmt -list=true -write=false -diff=true -check=true"
                }
            }
        }

        stage('TerraformValidate') {
            steps {
                dir('jenkins-terraform-pipeline/ec2_pipeline/') {
                    sh "terraform validate"
                }
            }
        }

        stage('TerraformPlan') {
            steps {
                dir('jenkins-terraform-pipeline/ec2_pipeline/') {
                    script {
                        try {
                            sh "terraform workspace new ${params.WORKSPACE}"
                        } catch (Exception err) {
                            sh "terraform workspace select ${params.WORKSPACE}"
                        }
                        sh """
                            terraform plan -out=terraform.tfplan     
                        """
                        stash name: "terraform-plan", includes: "terraform.tfplan"
                    }
                }
            }
        }

        stage('TerraformApply') {
            steps {
                script {
                    def apply = false
                    try {
                        input message: 'Can you please confirm to apply', ok: 'Ready to Apply the Config'
                        apply = true
                    } catch (Exception err) {
                        apply = false
                        currentBuild.result = 'UNSTABLE'
                    }
                    if (apply) {
                        dir('jenkins-terraform-pipeline/ec2_pipeline/') {
                            unstash "terraform-plan"
                            sh "terraform apply terraform.tfplan"
                        }
                    }
                }
            }
        }
    }
}
